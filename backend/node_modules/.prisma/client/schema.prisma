// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  player
  fan
}

enum MatchStatus {
  scheduled
  finished
}

enum EventType {
  goal
  yellow
  red
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String?
  role      Role       @default(fan)
  team      Team?      @relation(fields: [teamId], references: [id], onDelete: SetNull)
  teamId    Int?
  pushToken String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  followers Follower[]
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  crestUrl    String?      @db.Text
  players     Player[]
  users       User[]
  homeMatches Match[]      @relation("HomeTeam")
  awayMatches Match[]      @relation("AwayTeam")
  followers   Follower[]
  events      MatchEvent[]
}

model Player {
  id           Int          @id @default(autoincrement())
  firstName    String
  lastName     String
  age          Int
  position     String
  jerseyNumber Int
  photoUrl     String?
  team         Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       Int
  events       MatchEvent[]
}

model Venue {
  id        Int     @id @default(autoincrement())
  name      String
  address   String?
  latitude  Float
  longitude Float
  matches   Match[]
}

model Match {
  id         Int          @id @default(autoincrement())
  homeTeam   Team         @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  homeTeamId Int
  awayTeam   Team         @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  awayTeamId Int
  venue      Venue        @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId    Int
  datetime   DateTime
  status     MatchStatus  @default(scheduled)
  homeScore  Int          @default(0)
  awayScore  Int          @default(0)
  events     MatchEvent[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model MatchEvent {
  id        Int       @id @default(autoincrement())
  match     Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId   Int
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    Int
  player    Player?   @relation(fields: [playerId], references: [id], onDelete: SetNull)
  playerId  Int?
  minute    Int
  type      EventType
  notes     String?
  createdAt DateTime  @default(now())
}

model Follower {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId Int

  @@unique([userId, teamId])
}
